import { Box, Button, IconButton, TextField, MenuItem, Select, FormControl, InputLabel, Alert } from "@mui/material";
import { Formik } from "formik";
import * as yup from "yup";
import useMediaQuery from "@mui/material/useMediaQuery";
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import Header from "../../components/Header";
import { useNavigate } from 'react-router-dom';
import axios from "axios";
import BasicDateTimePicker from "../../components/DateTime";
import React from "react";
;


const initialValues = {
    facility_id: "",  // Assuming facility ID will be auto-generated by the DB
    facility_name: "",
    facility_type: "",  // 
    location_id: "",  // Location ID if applicable
    status: "Active",  // Set default status to Active
};





const userSchema = yup.object().shape({
    facility_id: yup.string().required("Facility ID is required"),  // Add validation for facility_id
    facility_name: yup.string().required("Facility name is required"),
    facility_type: yup.string().required("Facility type is required"),
    location_id: yup.number().required("Location ID is required").positive("Location ID must be positive"),
});










const FacilitiesForm = () => {
    const isNonMobile = useMediaQuery("(min-width:600px)");
    const navigate = useNavigate();

    // Alert message states
    const [alertMessage, setAlertMessage] = React.useState("");
    const [alertSeverity, setAlertSeverity] = React.useState("success"); // 'success' or 'error'
    const [alertVisible, setAlertVisible] = React.useState(false); // To control alert visibility

    const handleAlertClose = () => {
        setAlertVisible(false); // Hide the alert when closed
    };

    

    const handleFormSubmit = async (values) => {
        // Create a request body that matches the expected API schema for facilities
        const requestBody = {
            facility_id: values.facility_id,
            facility_name: values.facility_name,
            facility_type: values.facility_type,
            location_id: values.location_id,
            status: values.status,  // Assuming default status is "Active"
        };
    
        // Check for any missing or incorrect values
        const missingFields = [];
        Object.entries(requestBody).forEach(([key, value]) => {
            if (value === '' || value === undefined) {
                missingFields.push(key);
            }
        });
    
        if (missingFields.length > 0) {
            console.error('Missing fields:', missingFields);
            alert(`Please fill in the following fields: ${missingFields.join(', ')}`);
            return; // Stop submission if there are missing fields
        }
    
        try {
            // Replace with the actual API endpoint for adding a facility
            const response = await axios.post('https://theme-park-backend.ambitioussea-02dd25ab.eastus.azurecontainerapps.io/api/v1/park-factilities/', requestBody);
            console.log(response.data); // Handle the response as needed
            setAlertMessage("Facility created successfully!");
            setAlertSeverity("success");
            setAlertVisible(true);
            navigate('/facilities'); // Navigate to the facilities list or success page after submission
        } catch (error) {
            console.error('Error submitting form:', error); // Handle the error appropriately
            if (error.response) {
                console.error('Response data:', error.response.data); // Log the response data
                setAlertMessage('Submission failed. Please check the console for more details.');
                setAlertSeverity("error");
                setAlertVisible(true);            }
        }
    };
    

    return(
    
    <Box  m="20px">
        <IconButton onClick={() => navigate('/facilities')}>
            <ArrowBackIcon sx={{ fontSize: "30px", color: "grey" }} />
        </IconButton>
        <Header title="CREATE NEW FACILITY" subtitle="Add a incorporated facility to the park's list" />

            {/* Conditional Alert */}
            {alertVisible && (
                <Alert
                    severity={alertSeverity}  // 'success' or 'error'
                    onClose={handleAlertClose} 
                    sx={{ marginBottom: "20px" }} // Optional styling for margin
                >
                    {alertMessage}
                </Alert>
            )}  

        <Formik 
    onSubmit={handleFormSubmit}
    initialValues={initialValues}
    validationSchema={userSchema}
>
    {({ values, errors, touched, handleBlur, handleChange, handleSubmit }) => (
        <form onSubmit={handleSubmit}>
            <Box display="grid" gap="30px" gridTemplateColumns="repeat(4, minmax(0, 1fr))"
                sx={{
                    "& > div": { gridColumn: isNonMobile ? undefined : "span 4" },
                }}>
                <TextField 
                    fullWidth
                    variant="filled"
                    type="text"
                    label="Facility ID"
                    onBlur={handleBlur}
                    onChange={handleChange}
                    value={values.facility_id}
                    name="facility_id"
                    error={!!touched.facility_id && !!errors.facility_id}
                    helperText={touched.facility_id && errors.facility_id}
                    sx={{
                        gridColumn: "span 2"
                    }}
                />
                <TextField 
                    fullWidth
                    variant="filled"
                    type="text"
                    label="Facility Name"
                    onBlur={handleBlur}
                    onChange={handleChange}
                    value={values.facility_name}
                    name="facility_name"
                    error={!!touched.facility_name && !!errors.facility_name}
                    helperText={touched.facility_name && errors.facility_name}
                    sx={{
                        gridColumn: "span 2"
                    }}
                />

                <TextField 
                    fullWidth
                    variant="filled"
                    type="text"
                    label="Facility Type"
                    onBlur={handleBlur}
                    onChange={handleChange}
                    value={values.facility_type}
                    name="facility_type"
                    error={!!touched.facility_type && !!errors.facility_type}
                    helperText={touched.facility_type && errors.facility_type}
                    sx={{
                        gridColumn: "span 2"
                    }}
                />

                <TextField 
                    fullWidth
                    variant="filled"
                    type="number"
                    label="Location ID"
                    onBlur={handleBlur}
                    onChange={handleChange}
                    value={values.location_id}
                    name="location_id"
                    error={!!touched.location_id && !!errors.location_id}
                    helperText={touched.location_id && errors.location_id}
                    sx={{
                        gridColumn: "span 2"
                    }}
                />

                <FormControl fullWidth variant="filled" sx={{ gridColumn: "span 2" }}>
                    <InputLabel id="status-label">Status</InputLabel>
                    <Select
                        labelId="status-label"
                        id="status"
                        name="status"
                        value={values.status}
                        onBlur={handleBlur}
                        onChange={handleChange}
                        error={!!touched.status && !!errors.status}
                    >
                        <MenuItem value="Active">Active</MenuItem>
                        <MenuItem value="Inactive">Inactive</MenuItem>
                    </Select>
                    {touched.status && errors.status && (
                        <div style={{ color: 'red' }}>{errors.status}</div>
                    )}
                </FormControl>
            </Box>

            <Box display="flex" justifyContent="end" mt="20px">
                <Button type="submit" color="secondary" variant="contained">
                    Add Facility
                </Button>
            </Box>
        </form>
    )}
</Formik>

    </Box>
    )
}

export default FacilitiesForm;
