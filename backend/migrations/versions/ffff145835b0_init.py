"""init

Revision ID: ffff145835b0
Revises: 
Create Date: 2024-10-22 09:27:45.810099

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'ffff145835b0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('customer_auth',
    sa.Column('uid', mysql.VARCHAR(length=36), nullable=False),
    sa.Column('customer_id', mysql.INTEGER(), nullable=True, comment='Foreign key to Customers table, some customers may have user accounts'),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', mysql.VARCHAR(), server_default='user', nullable=False, comment='Customer role in the database that sets permission levels.'),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('password_hash', mysql.VARCHAR(), nullable=False),
    sa.Column('created_at', mysql.TIMESTAMP(), nullable=True),
    sa.Column('update_at', mysql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.customer_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('uid')
    )
    op.add_column('invoice', sa.Column('amount_due', mysql.DECIMAL(precision=10, scale=2), nullable=False, comment='Price per unit of the item invoiced'))
    op.add_column('invoice', sa.Column('issue_date', sa.DATE(), nullable=True, comment='Date invoice was generated.'))
    op.add_column('invoice', sa.Column('due_date', sa.DATE(), nullable=True, comment='Expected date for the invoice to be paid.'))
    op.add_column('invoice', sa.Column('payment_status', sa.Enum('paid', 'partial', 'pending', 'overdue', 'canceled', 'failed', 'refunded', 'disputed', 'awaiting', 'void', name='paymentstatus'), nullable=False, comment='The current status of the invoice.'))
    op.drop_column('invoice', 'actual_date')
    op.drop_column('invoice', 'price')
    op.drop_column('invoice', 'expected_date')
    op.drop_column('invoice', 'quantity')
    op.drop_column('invoice', 'received')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('invoice', sa.Column('received', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True, comment='Indicates whether the invoice has been received (True/False)'))
    op.add_column('invoice', sa.Column('quantity', mysql.INTEGER(), autoincrement=False, nullable=False, comment='Quantity of items invoiced'))
    op.add_column('invoice', sa.Column('expected_date', sa.DATE(), nullable=True, comment='Expected date for the item to be received'))
    op.add_column('invoice', sa.Column('price', mysql.DECIMAL(precision=10, scale=2), nullable=False, comment='Price per unit of the item invoiced'))
    op.add_column('invoice', sa.Column('actual_date', mysql.TIMESTAMP(), nullable=False, comment='Actual date when the invoice was received'))
    op.drop_column('invoice', 'payment_status')
    op.drop_column('invoice', 'due_date')
    op.drop_column('invoice', 'issue_date')
    op.drop_column('invoice', 'amount_due')
    op.drop_table('customer_auth')
    # ### end Alembic commands ###
